{"ast":null,"code":"/*\n * ToneGenerator for node.js\n * generates raw PCM data for a tone,\n * specify frequency, length, volume and sampling rate\n */\nvar shapes = {\n  sine: function (i, cycle, volume) {\n    // i / cycle => value between 0 and 1\n    // 0 = beginning of circly\n    // 0.25 Math.sin = 1\n    // 0.5 Math.sin = 0\n    // 0.75 Math.sin = -1\n    // 1 Math.sin = 1\n    return Math.min(volume * Math.sin(i / cycle * Math.PI * 2), volume - 1);\n  },\n  triangle: function (i, cycle, volume) {\n    var halfCycle = cycle / 2;\n    var level;\n\n    if (i < halfCycle) {\n      level = volume * 2 * (i / halfCycle) - volume;\n    } else {\n      i = i - halfCycle;\n      level = -(volume * 2) * (i / halfCycle) + volume;\n    }\n\n    return Math.min(level, volume - 1);\n  },\n  saw: function (i, cycle, volume) {\n    return Math.min(volume * 2 * (i / cycle) - volume, volume - 1);\n  },\n  square: function (i, cycle, volume) {\n    if (i > cycle / 2) {\n      return volume - 1;\n    }\n\n    return -volume;\n  }\n};\n\nfunction generateCycle(cycle, volume, shape) {\n  var data = [];\n  var tmp;\n  var generator = typeof shape == 'function' ? shape : shapes[shape];\n\n  if (!generator) {\n    throw new Error('Invalid wave form: \"' + shape + '\" choose between: ' + Object.keys(shapes));\n  }\n\n  for (var i = 0; i < cycle; i++) {\n    tmp = generator(i, cycle, volume);\n    data[i] = Math.round(tmp);\n  }\n\n  return data;\n}\n\nfunction generateWaveForm(opts) {\n  opts = opts || {};\n  var freq = opts.freq || 440;\n  var rate = opts.rate || 44100;\n  var lengthInSecs = opts.lengthInSecs || 2.0;\n  var volume = opts.volume || 30;\n  var shape = opts.shape || 'sine';\n  var cycle = Math.floor(rate / freq);\n  var samplesLeft = lengthInSecs * rate;\n  var cycles = samplesLeft / cycle;\n  var ret = [];\n\n  for (var i = 0; i < cycles; i++) {\n    ret = ret.concat(generateCycle(cycle, volume, shape));\n  }\n\n  return ret;\n}\n\n;\n\nmodule.exports = function () {\n  // to support both old interface and the new one:\n  var opts = arguments[0];\n\n  if (arguments.length > 1 && typeof opts === \"number\") {\n    opts = {};\n    opts.freq = arguments[0];\n    opts.lengthInSecs = arguments[1];\n    opts.volume = arguments[2];\n    opts.rate = arguments[3];\n  }\n\n  return generateWaveForm(opts);\n};\n\nmodule.exports.MAX_16 = 32768;\nmodule.exports.MAX_8 = 128;","map":null,"metadata":{},"sourceType":"script"}