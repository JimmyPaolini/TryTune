{"ast":null,"code":"const SAMPLE_RATE = 44100;\nlet shapes = {\n  sine: function (s, freq) {\n    let t = s / SAMPLE_RATE;\n    return Math.sin(t * freq * 2 * Math.PI);\n  },\n  triangle: function (s, freq) {\n    let t = s / SAMPLE_RATE;\n    let p = 1 / freq;\n    return 2 * Math.abs(2 * (t / p - Math.floor(t / p + 1 / 2))) - 1;\n  },\n  saw: function (s, freq) {\n    let t = s / SAMPLE_RATE;\n    let p = 1 / freq;\n    return 2 * (t / p - Math.floor(t / p + 1 / 2));\n  },\n  square: function (s, freq) {\n    let t = s / SAMPLE_RATE;\n    let p = 1 / freq;\n    return t % p > p / 2 ? 1 : -1;\n  }\n  /*function melody(notes) {\n    let mel = []\n    for (let i = 0; i < notes.length; i++) {\n      mel = mel.concat(notes[i])\n    }\n    return mel\n  }*/\n\n};\n\nfunction norm(x) {\n  while (x > 2) x /= 2;\n\n  while (x < 1) x *= 2;\n\n  return x;\n}\n\nfunction cents(x) {\n  return 1200 * Math.log(norm(x)) / Math.log(2);\n}\n\nfunction decimal(x) {\n  return Math.pow(2, x / 1200);\n}\n\nfunction getChordName(ops) {\n  let name = '';\n\n  switch (ops.rootBNS) {\n    case '-1':\n      name += 'b';\n      break;\n\n    case '1':\n      name += '#';\n      break;\n\n    default:\n      break;\n  }\n\n  let root;\n\n  switch (ops.root) {\n    case '0':\n      root = 'I';\n      break;\n\n    case '2':\n      root = 'II';\n      break;\n\n    case '4':\n      root = 'III';\n      break;\n\n    case '5':\n      root = 'IV';\n      break;\n\n    case '7':\n      root = 'V';\n      break;\n\n    case '9':\n      root = 'VI';\n      break;\n\n    case '11':\n      root = 'VII';\n      break;\n\n    default:\n      break;\n  }\n\n  switch (ops.triad) {\n    case '[4,7]':\n      name += root;\n      break;\n\n    case '[3,7]':\n      name += root.toLowerCase();\n      break;\n\n    case '[4,8]':\n      name += root + 'aug';\n      break;\n\n    case '[3,6]':\n      name += root.toLowerCase() + 'dim';\n      break;\n\n    case '[5,7]':\n      name += root + 'sus4';\n      break;\n\n    case '[2,7]':\n      name += root + 'sus2';\n      break;\n\n    case '[4,6]':\n      name += root + 'b5';\n      break;\n\n    default:\n      break;\n  }\n\n  switch (ops.seventh) {\n    case '9':\n      name += 'dim7';\n      break;\n\n    case '10':\n      name += '7';\n      break;\n\n    case '11':\n      name += 'maj7';\n      break;\n\n    default:\n      break;\n  }\n\n  let extendeds = [];\n\n  switch (ops.ninth) {\n    case '1':\n      extendeds.push('b9');\n      break;\n\n    case '2':\n      extendeds.push('9');\n      break;\n\n    case '3':\n      extendeds.push('#9');\n      break;\n\n    default:\n      break;\n  }\n\n  switch (ops.eleventh) {\n    case '5':\n      extendeds.push('11');\n      break;\n\n    case '6':\n      extendeds.push('#11');\n      break;\n\n    default:\n      break;\n  }\n\n  switch (ops.thirteenth) {\n    case '8':\n      extendeds.push('b13');\n      break;\n\n    case '9':\n      extendeds.push('13');\n      break;\n\n    case '10':\n      extendeds.push('#13');\n      break;\n\n    default:\n      break;\n  }\n\n  if (extendeds.length > 0) name += '(' + extendeds.join(',') + ')';\n  return name;\n}\n\nconst tunings = {\n  'tet12': new Array(12).fill(1).map((elt, i) => Math.pow(2, i / 12)),\n  'just': [1, 16 / 15, 9 / 8, 6 / 5, 5 / 4, 4 / 3, 7 / 5, 3 / 2, 8 / 5, 5 / 3, 16 / 9, 15 / 8],\n  'pythag': [1, 256 / 243, 9 / 8, 32 / 27, 81 / 64, 4 / 3, 1024 / 729, 3 / 2, 121 / 81, 27 / 16, 16 / 9, 243 / 128],\n  'lim5': [1, 16 / 15, 9 / 8, 6 / 5, 5 / 4, 4 / 3, 64 / 45, 3 / 2, 8 / 5, 5 / 3, 16 / 9, 15 / 8],\n  'lim7': [1, 16 / 15, 9 / 8, 6 / 5, 5 / 4, 4 / 3, 7 / 5, 3 / 2, 8 / 5, 5 / 3, 16 / 9, 15 / 8],\n  'mt_1/4': [],\n  'mt_1/3': [],\n  'mt_2/7': [],\n  'mt_1/5': []\n};\nconst mt_1_4gen = decimal(cents(3 / 2) - cents(81 / 80) / 4);\nconst mt_1_3gen = decimal(cents(3 / 2) - cents(81 / 80) / 3);\nconst mt_2_7gen = decimal(cents(3 / 2) - cents(81 / 80) * 2 / 7);\nconst mt_1_5gen = decimal(cents(3 / 2) - cents(81 / 80) / 5);\n\nfor (let i = -6; i < 6; i++) {\n  tunings['mt_1/4'].push(norm(Math.pow(mt_1_4gen, i)));\n  tunings['mt_1/3'].push(norm(Math.pow(mt_1_3gen, i)));\n  tunings['mt_2/7'].push(norm(Math.pow(mt_2_7gen, i)));\n  tunings['mt_1/5'].push(norm(Math.pow(mt_1_5gen, i)));\n}\n\ntunings['mt_1/4'].sort();\ntunings['mt_1/3'].sort();\ntunings['mt_2/7'].sort();\ntunings['mt_1/5'].sort();\n\nfunction norm12(x) {\n  while (x > 12) x -= 12;\n\n  while (x < 0) x += 12;\n\n  return x;\n}\n\nfunction oct(x) {\n  if (x > 0) return Math.ceil(x / 11);else return 1 / (1 + Math.ceil(x / 11));\n}\n\nfunction getAudio(ops) {\n  const audio = [];\n  ops = {\n    fundamental: parseFloat(ops.fundamental),\n    scale: tunings[ops.system],\n    root: parseInt(ops.root),\n    rootBNS: parseInt(ops.rootBNS),\n    triad: JSON.parse(ops.triad),\n    seventh: parseInt(ops.seventh),\n    ninth: parseInt(ops.ninth),\n    eleventh: parseInt(ops.eleventh),\n    thirteenth: parseInt(ops.thirteenth) //console.log(ops)\n\n  };\n  const root = ops.root + ops.rootBNS;\n  const third = root + ops.triad[0];\n  const fifth = root + ops.triad[1];\n  console.log(root, third, fifth);\n  console.log(Math.ceil(fifth / 12));\n  audio.push(ops.fundamental * ops.scale[norm12(root)] * Math.ceil(root / 11));\n  audio.push(ops.fundamental * ops.scale[norm12(third)] * Math.ceil(third / 11));\n  audio.push(ops.fundamental * ops.scale[norm12(fifth)] * Math.ceil(fifth / 11));\n  if (!isNaN(ops.seventh)) audio.push(ops.fundamental * ops.scale[root + ops.seventh]);\n  if (!isNaN(ops.ninth)) audio.push(ops.fundamental * 2 * ops.scale[root + ops.ninth]);\n  if (!isNaN(ops.eleventh)) audio.push(ops.fundamental * 2 * ops.scale[root + ops.eleventh]);\n  if (!isNaN(ops.thirteenth)) audio.push(ops.fundamental * 2 * ops.scale[root + ops.thirteenth]);\n  return audio;\n}\n\nfunction getAudioFromTextin(ops) {\n  let fundamental = parseFloat(ops.fundamental);\n  let audio = [fundamental];\n  ops.value.split(', ').forEach(function (interval) {\n    if (interval.includes('/') && !interval.includes('.')) {\n      let num_dem = interval.split('/');\n      let numerator = parseInt(num_dem[0]);\n      let denominator = parseInt(num_dem[1]);\n      audio.push(fundamental * numerator / denominator);\n    } else if (interval.includes('.') && !interval.includes('/')) {\n      let cents = parseFloat(interval);\n      audio.push(fundamental * Math.pow(2, cents / 1200));\n    }\n  });\n  return audio;\n}\n\nfunction play(audio, playtime, shape) {\n  console.log(audio);\n  let AudioContext = window.AudioContext || window.webkitAudioContext;\n  const ctx = new AudioContext();\n  let buffer = ctx.createBuffer(1, playtime * SAMPLE_RATE, SAMPLE_RATE);\n  let bufferSetter = buffer.getChannelData(0);\n  var generator = typeof shape == 'function' ? shape : shapes[shape];\n\n  for (let t = 0; t < playtime * SAMPLE_RATE; t++) {\n    audio.forEach(function (freq) {\n      bufferSetter[t] += generator(t, freq);\n    });\n  }\n\n  let source = ctx.createBufferSource();\n  source.buffer = buffer;\n  source.connect(ctx.destination);\n  source.start();\n}\n\nconst Sound = {\n  getAudio,\n  getAudioFromTextin,\n  getChordName,\n  play\n};\nexport default Sound;","map":{"version":3,"sources":["/Users/jimmy/Documents/GitHub/Trytune/src/sound.js"],"names":["SAMPLE_RATE","shapes","sine","s","freq","t","Math","sin","PI","triangle","p","abs","floor","saw","square","norm","x","cents","log","decimal","pow","getChordName","ops","name","rootBNS","root","triad","toLowerCase","seventh","extendeds","ninth","push","eleventh","thirteenth","length","join","tunings","Array","fill","map","elt","i","mt_1_4gen","mt_1_3gen","mt_2_7gen","mt_1_5gen","sort","norm12","oct","ceil","getAudio","audio","fundamental","parseFloat","scale","system","parseInt","JSON","parse","third","fifth","console","isNaN","getAudioFromTextin","value","split","forEach","interval","includes","num_dem","numerator","denominator","play","playtime","shape","AudioContext","window","webkitAudioContext","ctx","buffer","createBuffer","bufferSetter","getChannelData","generator","source","createBufferSource","connect","destination","start","Sound"],"mappings":"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","sourcesContent":["const SAMPLE_RATE = 44100\n\nlet shapes = {\n  sine: function (s, freq) {\n    let t = s / SAMPLE_RATE;\n    return Math.sin(t * freq * 2 * Math.PI);\n  },\n  triangle: function (s, freq) {\n    let t = s / SAMPLE_RATE;\n    let p = 1 / freq;\n    return 2 * Math.abs(2 * (t/p - Math.floor(t/p + 1/2))) - 1;\n  },\n  saw: function (s, freq) {\n    let t = s / SAMPLE_RATE;\n    let p = 1 / freq;\n    return 2 * (t/p - Math.floor(t/p + 1/2));\n  },\n  square: function (s, freq) {\n    let t = s / SAMPLE_RATE;\n    let p = 1 / freq;\n    return t % p > p / 2 ? 1 : -1;\n  }\n}\n\n/*function melody(notes) {\n  let mel = []\n  for (let i = 0; i < notes.length; i++) {\n    mel = mel.concat(notes[i])\n  }\n  return mel\n}*/\n\nfunction norm(x) {\n  while (x > 2) x /= 2;\n  while (x < 1) x *= 2;\n  return x;\n}\n\nfunction cents(x) {\n  return 1200 * Math.log(norm(x)) / Math.log(2);\n}\n\nfunction decimal(x) {\n  return Math.pow(2, x / 1200);\n}\n\nfunction getChordName(ops) {\n  let name = '';\n  switch (ops.rootBNS) {\n    case '-1':\n      name += 'b';\n      break;\n    case '1':\n      name += '#';\n      break;\n    default:\n      break;\n  }\n  let root;\n  switch (ops.root) {\n    case '0':\n      root = 'I';\n      break;\n    case '2':\n    root = 'II';\n      break;\n    case '4':\n    root = 'III';\n      break;\n    case '5':\n    root = 'IV';\n      break;\n    case '7':\n    root = 'V';\n      break;\n    case '9':\n    root = 'VI';\n      break;\n    case '11':\n    root = 'VII';\n      break;\n    default:\n      break;\n  }\n  switch (ops.triad) {\n    case '[4,7]':\n      name += root;\n      break;\n    case '[3,7]':\n      name += root.toLowerCase();\n      break;\n    case '[4,8]':\n      name += root + 'aug';\n      break;\n    case '[3,6]':\n      name += root.toLowerCase() + 'dim';\n      break;\n    case '[5,7]':\n      name += root + 'sus4';\n      break;\n    case '[2,7]':\n      name += root + 'sus2';\n      break;\n    case '[4,6]':\n      name += root + 'b5';\n      break;\n    default:\n      break;\n  }\n  switch (ops.seventh) {\n    case '9':\n      name += 'dim7';\n      break;\n    case '10':\n      name += '7';\n      break;\n    case '11':\n      name += 'maj7';\n      break;\n    default:\n      break;\n  }\n  let extendeds = []\n  switch (ops.ninth) {\n    case '1':\n      extendeds.push('b9');\n      break;\n    case '2':\n      extendeds.push('9');\n      break;\n    case '3':\n      extendeds.push('#9');\n      break;\n    default:\n      break;\n  }\n  switch (ops.eleventh) {\n    case '5':\n      extendeds.push('11');\n      break;\n    case '6':\n      extendeds.push('#11');\n      break;\n    default:\n      break;\n  }\n  switch (ops.thirteenth) {\n    case '8':\n      extendeds.push('b13');\n      break;\n    case '9':\n      extendeds.push('13');\n      break;\n    case '10':\n      extendeds.push('#13');\n      break;\n    default:\n      break;\n  }\n  if (extendeds.length > 0) (\n    name += '(' + extendeds.join(',') + ')'\n  )\n  return name;\n}\n\nconst tunings = {\n  'tet12': new Array(12).fill(1).map((elt,i) => Math.pow(2,i/12)),\n  'just': [1, 16/15, 9/8, 6/5, 5/4, 4/3, 7/5, 3/2, 8/5, 5/3, 16/9, 15/8],\n  'pythag': [1, 256/243, 9/8, 32/27, 81/64, 4/3, 1024/729, 3/2, 121/81, 27/16, 16/9, 243/128],\n  'lim5': [1, 16/15, 9/8, 6/5, 5/4, 4/3, 64/45, 3/2, 8/5, 5/3, 16/9, 15/8],\n  'lim7': [1, 16/15, 9/8, 6/5, 5/4, 4/3, 7/5, 3/2, 8/5, 5/3, 16/9, 15/8],\n  'mt_1/4': [],\n  'mt_1/3': [],\n  'mt_2/7': [],\n  'mt_1/5': [],\n}\nconst mt_1_4gen = decimal(cents(3/2) - cents(81/80) / 4);\nconst mt_1_3gen = decimal(cents(3/2) - cents(81/80) / 3);\nconst mt_2_7gen = decimal(cents(3/2) - cents(81/80) * 2/7);\nconst mt_1_5gen = decimal(cents(3/2) - cents(81/80) / 5);\nfor (let i = -6; i < 6; i++) {\n  tunings['mt_1/4'].push(norm(Math.pow(mt_1_4gen, i)));\n  tunings['mt_1/3'].push(norm(Math.pow(mt_1_3gen, i)));\n  tunings['mt_2/7'].push(norm(Math.pow(mt_2_7gen, i)));\n  tunings['mt_1/5'].push(norm(Math.pow(mt_1_5gen, i)));\n}\ntunings['mt_1/4'].sort();\ntunings['mt_1/3'].sort();\ntunings['mt_2/7'].sort();\ntunings['mt_1/5'].sort();\n\nfunction norm12(x) {\n  while (x > 12) x -= 12;\n  while (x < 0) x += 12;\n  return x;\n}\n\nfunction oct(x) {\n  if (x > 0) return Math.ceil(x / 11)\n  else return 1 / (1 + Math.ceil(x / 11))\n}\n\nfunction getAudio(ops) {\n  const audio = []\n  ops = {\n    fundamental: parseFloat(ops.fundamental),\n    scale: tunings[ops.system],\n    root: parseInt(ops.root),\n    rootBNS: parseInt(ops.rootBNS),\n    triad: JSON.parse(ops.triad),\n    seventh: parseInt(ops.seventh),\n    ninth: parseInt(ops.ninth),\n    eleventh: parseInt(ops.eleventh),\n    thirteenth: parseInt(ops.thirteenth),\n  }\n  //console.log(ops)\n\n  const root = ops.root + ops.rootBNS\n  const third = root + ops.triad[0]\n  const fifth = root + ops.triad[1]\n  console.log(root, third, fifth)\n  console.log(Math.ceil(fifth / 12))\n  audio.push(ops.fundamental * ops.scale[norm12(root)] * Math.ceil(root / 11))\n  audio.push(ops.fundamental * ops.scale[norm12(third)] * Math.ceil(third / 11))\n  audio.push(ops.fundamental * ops.scale[norm12(fifth)] * Math.ceil(fifth / 11))\n\n  if (!isNaN(ops.seventh))\n    audio.push(ops.fundamental * ops.scale[root + ops.seventh])\n  if (!isNaN(ops.ninth))\n    audio.push(ops.fundamental * 2 * ops.scale[root + ops.ninth])\n  if (!isNaN(ops.eleventh))\n    audio.push(ops.fundamental * 2 * ops.scale[root + ops.eleventh])\n  if (!isNaN(ops.thirteenth))\n    audio.push(ops.fundamental * 2 * ops.scale[root + ops.thirteenth])\n\n  return audio\n}\n\n\n\nfunction getAudioFromTextin(ops) {\n  let fundamental = parseFloat(ops.fundamental)\n  let audio = [fundamental]\n  ops.value.split(', ').forEach(function(interval) {\n    if (interval.includes('/') && !interval.includes('.')) {\n      let num_dem = interval.split('/');\n      let numerator = parseInt(num_dem[0]);\n      let denominator = parseInt(num_dem[1]);\n      audio.push(fundamental * numerator / denominator);\n    } else if (interval.includes('.') && !interval.includes('/')) {\n      let cents = parseFloat(interval);\n      audio.push(fundamental * Math.pow(2, cents/1200));\n    }\n  })\n  return audio;\n}\n\nfunction play(audio, playtime, shape) {\n  console.log(audio)\n  let AudioContext = window.AudioContext || window.webkitAudioContext;\n  const ctx = new AudioContext();\n  let buffer = ctx.createBuffer(1, playtime * SAMPLE_RATE, SAMPLE_RATE);\n  let bufferSetter = buffer.getChannelData(0);\n  var generator = typeof shape == 'function' ? shape : shapes[shape];\n\n  for (let t = 0; t < playtime * SAMPLE_RATE; t++) {\n    audio.forEach(function(freq) {\n      bufferSetter[t] += generator(t, freq)\n    })\n  }\n\n  let source = ctx.createBufferSource();\n  source.buffer = buffer;\n  source.connect(ctx.destination);\n  source.start();\n}\n\nconst Sound = {\n  getAudio,\n  getAudioFromTextin,\n  getChordName,\n  play\n}\n\nexport default Sound;\n"]},"metadata":{},"sourceType":"module"}