{"ast":null,"code":"const tone = require('tonegenerator');\n\nconst header = require('waveheader');\n\nfunction harmony(freqs = 440, time = 2, shape = 'sine') {\n  if (typeof freqs === 'number') {\n    return tone({\n      freq: freqs,\n      lengthInSecs: time,\n      volume: tone.MAX_16,\n      rate: 44100,\n      shape: shape\n    });\n  } else if (freqs !== null && typeof freqs === 'object') {\n    let tones = [];\n\n    for (let i = 0; i < freqs.length; i++) {\n      tones.push(tone({\n        freq: freqs[i],\n        lengthInSecs: time,\n        volume: tone.MAX_16,\n        rate: 44100,\n        shape: shape\n      }));\n    }\n\n    let samples = [];\n\n    for (let i = 0; i < tones[0].length; i++) {\n      samples.push(0);\n\n      for (let j = 0; j < tones.length; j++) {\n        samples[i] += tones[j][i];\n      }\n\n      samples[i] /= tones.length;\n    }\n\n    return samples;\n  }\n}\n\nfunction melody(notes) {\n  let mel = [];\n\n  for (let i = 0; i < notes.length; i++) {\n    mel = mel.concat(notes[i]);\n  }\n\n  return mel;\n}\n\nfunction writeAudio(samples) {\n  let file = require('fs').createWriteStream('components/audio/cur.wav');\n\n  file.write(header(samples.length * 2, {\n    bitDepth: 16\n  }));\n  let data = Int16Array.from(samples);\n  let buffer = Buffer.allocUnsafe(data.length * 2); // 2 bytes per sample\n\n  data.forEach(function (value, index) {\n    buffer.writeInt16LE(value, index * 2);\n  });\n  file.write(buffer);\n  file.end();\n}\n/*this.state = {\nplaytime: '5',\nfundamental: '440',\nshape: 'sine',\nroot: '0',\nrootBNS: '0',\ntriad: '[4,7]',\nseventh: 'none',\nninth: 'none',\neleventh: 'none',\nthirteenth: 'none',\n}*/\n\n\nlet scale = new Array(24).fill(1).map((elt, i) => Math.pow(2, i / 12));\n\nfunction optionsToAudio(ops) {\n  let audio = [];\n  ops = {\n    playtime: parseFloat(ops.playtime),\n    fundamental: parseFloat(ops.fundamental),\n    shape: ops.playtime,\n    root: parseInt(ops.root),\n    rootBNS: parseInt(ops.rootBNS),\n    triad: JSON.parse(ops.triad),\n    seventh: parseInt(ops.seventh),\n    ninth: parseInt(ops.ninth),\n    eleventh: parseInt(ops.eleventh),\n    thirteenth: parseInt(ops.thirteenth)\n  };\n  let root = ops.root + ops.rootBNS;\n  audio.push(ops.fundamental * scale[root]);\n  let third = ops.triad[0];\n  let fifth = ops.triad[1];\n  audio.push(ops.fundamental * scale[root + third]);\n  audio.push(ops.fundamental * scale[root + fifth]);\n  if (!isNaN(ops.seventh)) audio.push(ops.fundamental * scale[root + ops.seventh]);\n  if (ops.ninth != NaN) audio.push(ops.fundamental * scale[root + ops.ninth]);\n  if (ops.eleventh != NaN) audio.push(ops.fundamental * scale[root + ops.eleventh]);\n  if (ops.thirteenth != NaN) audio.push(ops.fundamental * scale[root + ops.thirteenth]);\n  return harmony(audio, ops.playtime, ops.shape);\n}\n\nlet Harmony = {\n  harmony: harmony,\n  writeAudio: writeAudio,\n  optionsToAudio: optionsToAudio\n};\nexport default Harmony;","map":{"version":3,"sources":["/Users/jimmy/Documents/trytune/src/trytune.js"],"names":["tone","require","header","harmony","freqs","time","shape","freq","lengthInSecs","volume","MAX_16","rate","tones","i","length","push","samples","j","melody","notes","mel","concat","writeAudio","file","createWriteStream","write","bitDepth","data","Int16Array","from","buffer","Buffer","allocUnsafe","forEach","value","index","writeInt16LE","end","scale","Array","fill","map","elt","Math","pow","optionsToAudio","ops","audio","playtime","parseFloat","fundamental","root","parseInt","rootBNS","triad","JSON","parse","seventh","ninth","eleventh","thirteenth","third","fifth","isNaN","NaN","Harmony"],"mappings":"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","sourcesContent":["const tone = require('tonegenerator')\nconst header = require('waveheader')\n\nfunction harmony(freqs=440, time=2, shape='sine') {\n  if (typeof freqs === 'number') {\n    return tone({\n      freq: freqs,\n      lengthInSecs: time,\n      volume: tone.MAX_16,\n      rate: 44100,\n      shape: shape,\n    })\n  } else if (freqs !== null && typeof freqs === 'object') {\n    let tones = []\n    for (let i = 0; i < freqs.length; i++) {\n      tones.push(tone({\n        freq: freqs[i],\n        lengthInSecs: time,\n        volume: tone.MAX_16,\n        rate: 44100,\n        shape: shape,\n      }))\n    }\n    let samples = []\n    for (let i = 0; i < tones[0].length; i++) {\n      samples.push(0)\n      for (let j = 0; j < tones.length; j++) {\n        samples[i] += tones[j][i]\n      }\n      samples[i] /= tones.length\n    }\n    return samples\n  }\n}\n\nfunction melody(notes) {\n  let mel = []\n  for (let i = 0; i < notes.length; i++) {\n    mel = mel.concat(notes[i])\n  }\n  return mel\n}\n\nfunction writeAudio(samples) {\n  let file = require('fs').createWriteStream('components/audio/cur.wav')\n  file.write(header(samples.length * 2, { bitDepth: 16 }))\n  let data = Int16Array.from(samples)\n  let buffer = Buffer.allocUnsafe(data.length * 2) // 2 bytes per sample\n  data.forEach(function (value, index) {\n    buffer.writeInt16LE(value, index * 2)\n  })\n  file.write(buffer)\n  file.end()\n}\n\n/*this.state = {\nplaytime: '5',\nfundamental: '440',\nshape: 'sine',\nroot: '0',\nrootBNS: '0',\ntriad: '[4,7]',\nseventh: 'none',\nninth: 'none',\neleventh: 'none',\nthirteenth: 'none',\n}*/\n\nlet scale = new Array(24).fill(1).map((elt,i) => Math.pow(2,i/12))\n\nfunction optionsToAudio(ops) {\n  let audio = []\n  ops = {\n    playtime: parseFloat(ops.playtime),\n    fundamental: parseFloat(ops.fundamental),\n    shape: ops.playtime,\n    root: parseInt(ops.root),\n    rootBNS: parseInt(ops.rootBNS),\n    triad: JSON.parse(ops.triad),\n    seventh: parseInt(ops.seventh),\n    ninth: parseInt(ops.ninth),\n    eleventh: parseInt(ops.eleventh),\n    thirteenth: parseInt(ops.thirteenth),\n  }\n  let root = ops.root + ops.rootBNS\n  audio.push(ops.fundamental * scale[root])\n  let third = ops.triad[0]\n  let fifth = ops.triad[1]\n  audio.push(ops.fundamental * scale[root + third])\n  audio.push(ops.fundamental * scale[root + fifth])\n  if (!isNaN(ops.seventh))\n    audio.push(ops.fundamental * scale[root + ops.seventh])\n  if (ops.ninth != NaN)\n    audio.push(ops.fundamental * scale[root + ops.ninth])\n  if (ops.eleventh != NaN)\n    audio.push(ops.fundamental * scale[root + ops.eleventh])\n  if (ops.thirteenth != NaN)\n    audio.push(ops.fundamental * scale[root + ops.thirteenth])\n\n  return harmony(audio, ops.playtime, ops.shape)\n}\n\nlet Harmony = {\n  harmony: harmony,\n  writeAudio: writeAudio,\n  optionsToAudio: optionsToAudio\n}\n\nexport default Harmony;\n"]},"metadata":{},"sourceType":"module"}