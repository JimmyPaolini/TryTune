{"ast":null,"code":"const tone = require('tonegenerator');\n\nconst header = require('waveheader');\n\nconst fs = require('fs');\n\nfunction harmony(freqs = 440, time = 2, shape = 'sine') {\n  if (typeof freqs === 'number') {\n    return tone({\n      freq: freqs,\n      lengthInSecs: time,\n      volume: tone.MAX_16,\n      rate: 44100,\n      shape: shape\n    });\n  } else if (freqs !== null && typeof freqs === 'object') {\n    let tones = [];\n\n    for (let i = 0; i < freqs.length; i++) {\n      tones.push(tone({\n        freq: freqs[i],\n        lengthInSecs: time,\n        volume: tone.MAX_16,\n        rate: 44100,\n        shape: shape\n      }));\n    }\n\n    let samples = [];\n\n    for (let i = 0; i < tones[0].length; i++) {\n      samples.push(0);\n\n      for (let j = 0; j < tones.length; j++) {\n        samples[i] += tones[j][i];\n      }\n\n      samples[i] /= tones.length;\n    }\n\n    return samples;\n  }\n}\n/*function melody(notes) {\n  let mel = []\n  for (let i = 0; i < notes.length; i++) {\n    mel = mel.concat(notes[i])\n  }\n  return mel\n}*/\n\n\nfunction writeAudio(samples) {\n  fetch('http://localhost:3000', {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*'\n    },\n    body: JSON.stringify(this.state)\n  }).then(res => {\n    return res;\n  }).catch(err => err);\n  let file = fs.createWriteStream('components/audio/cur.wav');\n  file.write(header(samples.length * 2, {\n    bitDepth: 16\n  }));\n  let data = Int16Array.from(samples);\n  let buffer = Buffer.allocUnsafe(data.length * 2); // 2 bytes per sample\n\n  data.forEach(function (value, index) {\n    buffer.writeInt16LE(value, index * 2);\n  });\n  file.write(buffer);\n  file.end();\n}\n/*this.state = {\nplaytime: '5',\nfundamental: '440',\nshape: 'sine',\nroot: '0',\nrootBNS: '0',\ntriad: '[4,7]',\nseventh: 'none',\nninth: 'none',\neleventh: 'none',\nthirteenth: 'none',\n}*/\n\n\nlet scale = new Array(24).fill(1).map((elt, i) => Math.pow(2, i / 12));\n\nfunction updateAudio(ops) {\n  let audio = []; //console.log('old ops ', ops)\n\n  ops = {\n    playtime: parseFloat(ops.playtime),\n    fundamental: parseFloat(ops.fundamental),\n    shape: ops.shape,\n    root: parseInt(ops.root),\n    rootBNS: parseInt(ops.rootBNS),\n    triad: JSON.parse(ops.triad),\n    seventh: parseInt(ops.seventh),\n    ninth: parseInt(ops.ninth),\n    eleventh: parseInt(ops.eleventh),\n    thirteenth: parseInt(ops.thirteenth) //console.log('new ops ', ops)\n\n  };\n  let root = ops.root + ops.rootBNS;\n  let third = ops.triad[0];\n  let fifth = ops.triad[1];\n  audio.push(ops.fundamental * scale[root]);\n  audio.push(ops.fundamental * scale[root + third]);\n  audio.push(ops.fundamental * scale[root + fifth]);\n  if (!isNaN(ops.seventh)) audio.push(ops.fundamental * scale[root + ops.seventh]);\n  if (!isNaN(ops.ninth)) audio.push(ops.fundamental * scale[root + ops.ninth]);\n  if (!isNaN(ops.eleventh)) audio.push(ops.fundamental * scale[root + ops.eleventh]);\n  if (!isNaN(ops.thirteenth)) audio.push(ops.fundamental * scale[root + ops.thirteenth]);\n  writeAudio(harmony(audio, ops.playtime, ops.shape));\n}\n\nexport default updateAudio;","map":{"version":3,"sources":["/Users/jimmy/Documents/trytune/src/trytune.js"],"names":["tone","require","header","fs","harmony","freqs","time","shape","freq","lengthInSecs","volume","MAX_16","rate","tones","i","length","push","samples","j","writeAudio","fetch","method","headers","body","JSON","stringify","state","then","res","catch","err","file","createWriteStream","write","bitDepth","data","Int16Array","from","buffer","Buffer","allocUnsafe","forEach","value","index","writeInt16LE","end","scale","Array","fill","map","elt","Math","pow","updateAudio","ops","audio","playtime","parseFloat","fundamental","root","parseInt","rootBNS","triad","parse","seventh","ninth","eleventh","thirteenth","third","fifth","isNaN"],"mappings":"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","sourcesContent":["const tone = require('tonegenerator')\nconst header = require('waveheader')\nconst fs = require('fs')\n\nfunction harmony(freqs=440, time=2, shape='sine') {\n  if (typeof freqs === 'number') {\n    return tone({\n      freq: freqs,\n      lengthInSecs: time,\n      volume: tone.MAX_16,\n      rate: 44100,\n      shape: shape,\n    })\n  } else if (freqs !== null && typeof freqs === 'object') {\n    let tones = []\n    for (let i = 0; i < freqs.length; i++) {\n      tones.push(tone({\n        freq: freqs[i],\n        lengthInSecs: time,\n        volume: tone.MAX_16,\n        rate: 44100,\n        shape: shape,\n      }))\n    }\n    let samples = []\n    for (let i = 0; i < tones[0].length; i++) {\n      samples.push(0)\n      for (let j = 0; j < tones.length; j++) {\n        samples[i] += tones[j][i]\n      }\n      samples[i] /= tones.length\n    }\n    return samples\n  }\n}\n\n/*function melody(notes) {\n  let mel = []\n  for (let i = 0; i < notes.length; i++) {\n    mel = mel.concat(notes[i])\n  }\n  return mel\n}*/\n\nfunction writeAudio(samples) {\n  fetch('http://localhost:3000', {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*'\n    },\n    body: JSON.stringify(this.state)\n  }).then(res => {\n      return res;\n  }).catch(err => err)\n  let file = fs.createWriteStream('components/audio/cur.wav')\n  file.write(header(samples.length * 2, { bitDepth: 16 }))\n  let data = Int16Array.from(samples)\n  let buffer = Buffer.allocUnsafe(data.length * 2) // 2 bytes per sample\n  data.forEach(function (value, index) {\n    buffer.writeInt16LE(value, index * 2)\n  })\n  file.write(buffer)\n  file.end()\n}\n\n/*this.state = {\nplaytime: '5',\nfundamental: '440',\nshape: 'sine',\nroot: '0',\nrootBNS: '0',\ntriad: '[4,7]',\nseventh: 'none',\nninth: 'none',\neleventh: 'none',\nthirteenth: 'none',\n}*/\n\nlet scale = new Array(24).fill(1).map((elt,i) => Math.pow(2,i/12))\n\nfunction updateAudio(ops) {\n  let audio = []\n  //console.log('old ops ', ops)\n  ops = {\n    playtime: parseFloat(ops.playtime),\n    fundamental: parseFloat(ops.fundamental),\n    shape: ops.shape,\n    root: parseInt(ops.root),\n    rootBNS: parseInt(ops.rootBNS),\n    triad: JSON.parse(ops.triad),\n    seventh: parseInt(ops.seventh),\n    ninth: parseInt(ops.ninth),\n    eleventh: parseInt(ops.eleventh),\n    thirteenth: parseInt(ops.thirteenth),\n  }\n  //console.log('new ops ', ops)\n\n  let root = ops.root + ops.rootBNS\n  let third = ops.triad[0]\n  let fifth = ops.triad[1]\n  audio.push(ops.fundamental * scale[root])\n  audio.push(ops.fundamental * scale[root + third])\n  audio.push(ops.fundamental * scale[root + fifth])\n\n  if (!isNaN(ops.seventh))\n    audio.push(ops.fundamental * scale[root + ops.seventh])\n  if (!isNaN(ops.ninth))\n    audio.push(ops.fundamental * scale[root + ops.ninth])\n  if (!isNaN(ops.eleventh))\n    audio.push(ops.fundamental * scale[root + ops.eleventh])\n  if (!isNaN(ops.thirteenth))\n    audio.push(ops.fundamental * scale[root + ops.thirteenth])\n\n  writeAudio(harmony(audio, ops.playtime, ops.shape))\n}\n\nexport default updateAudio;\n"]},"metadata":{},"sourceType":"module"}