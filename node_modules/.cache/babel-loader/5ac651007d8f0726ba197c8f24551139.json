{"ast":null,"code":"const SAMPLE_RATE = 44100;\nlet shapes = {\n  sine: function (s, freq) {\n    let t = s / SAMPLE_RATE;\n    return Math.sin(t * freq * 2 * Math.PI);\n  },\n  triangle: function (s, freq) {\n    let t = s / SAMPLE_RATE;\n    let p = 1 / freq;\n    return 2 * Math.abs(2 * (t / p - Math.floor(t / p + 1 / 2))) - 1;\n  },\n  saw: function (s, freq) {\n    let t = s / SAMPLE_RATE;\n    let p = 1 / freq;\n    return 2 * (t / p - Math.floor(t / p + 1 / 2));\n  },\n  square: function (s, freq) {\n    let t = s / SAMPLE_RATE;\n    let p = 1 / freq;\n    return t % p > p / 2 ? 1 : -1;\n  }\n  /*function melody(notes) {\n    let mel = []\n    for (let i = 0; i < notes.length; i++) {\n      mel = mel.concat(notes[i])\n    }\n    return mel\n  }*/\n\n};\nconst tunings = {\n  tet12: new Array(12).fill(1).map((elt, i) => Math.pow(2, i / 12)),\n  just: [1, 16 / 15, 9 / 8, 6 / 5, 5 / 4, 4 / 3, 7 / 5, 3 / 2, 8 / 5, 5 / 3, 16 / 9, 15 / 8]\n};\n\nfunction getAudio(ops) {\n  let scale = tet12;\n  const audio = [];\n  ops = {\n    playtime: parseFloat(ops.playtime),\n    fundamental: parseFloat(ops.fundamental),\n    system: ops.system,\n    shape: tunings[ops.shape],\n    root: parseInt(ops.root),\n    rootBNS: parseInt(ops.rootBNS),\n    triad: JSON.parse(ops.triad),\n    seventh: parseInt(ops.seventh),\n    ninth: parseInt(ops.ninth),\n    eleventh: parseInt(ops.eleventh),\n    thirteenth: parseInt(ops.thirteenth)\n  };\n  let root = ops.root + ops.rootBNS;\n  let third = ops.triad[0];\n  let fifth = ops.triad[1];\n  audio.push(ops.fundamental * scale[root]);\n  audio.push(ops.fundamental * scale[root + third]);\n  audio.push(ops.fundamental * scale[root + fifth]);\n  if (!isNaN(ops.seventh)) audio.push(ops.fundamental * scale[root + ops.seventh]);\n  if (!isNaN(ops.ninth)) audio.push(ops.fundamental * 2 * scale[root + ops.ninth]);\n  if (!isNaN(ops.eleventh)) audio.push(ops.fundamental * 2 * scale[root + ops.eleventh]);\n  if (!isNaN(ops.thirteenth)) audio.push(ops.fundamental * 2 * scale[root + ops.thirteenth]);\n  return audio;\n}\n\nfunction getChordName(ops) {\n  let name = '';\n\n  switch (ops.rootBNS) {\n    case '-1':\n      name += 'b';\n      break;\n\n    case '1':\n      name += '#';\n      break;\n\n    default:\n      break;\n  }\n\n  let root;\n\n  switch (ops.root) {\n    case '0':\n      root = 'I';\n      break;\n\n    case '2':\n      root = 'II';\n      break;\n\n    case '4':\n      root = 'III';\n      break;\n\n    case '5':\n      root = 'IV';\n      break;\n\n    case '7':\n      root = 'V';\n      break;\n\n    case '9':\n      root = 'VI';\n      break;\n\n    case '11':\n      root = 'VII';\n      break;\n\n    default:\n      break;\n  }\n\n  switch (ops.triad) {\n    case '[4,7]':\n      name += root;\n      break;\n\n    case '[3,7]':\n      name += root.toLowerCase();\n      break;\n\n    case '[4,8]':\n      name += root + 'aug';\n      break;\n\n    case '[3,6]':\n      name += root.toLowerCase() + 'dim';\n      break;\n\n    case '[5,7]':\n      name += root + 'sus4';\n      break;\n\n    case '[2,7]':\n      name += root + 'sus2';\n      break;\n\n    case '[4,6]':\n      name += root + 'b5';\n      break;\n\n    default:\n      break;\n  }\n\n  switch (ops.seventh) {\n    case '9':\n      name += 'dim7';\n      break;\n\n    case '10':\n      name += '7';\n      break;\n\n    case '11':\n      name += 'maj7';\n      break;\n\n    default:\n      break;\n  }\n\n  let extendeds = [];\n\n  switch (ops.ninth) {\n    case '1':\n      extendeds.push('b9');\n      break;\n\n    case '2':\n      extendeds.push('9');\n      break;\n\n    case '3':\n      extendeds.push('#9');\n      break;\n\n    default:\n      break;\n  }\n\n  switch (ops.eleventh) {\n    case '5':\n      extendeds.push('11');\n      break;\n\n    case '6':\n      extendeds.push('#11');\n      break;\n\n    default:\n      break;\n  }\n\n  switch (ops.thirteenth) {\n    case '8':\n      extendeds.push('b13');\n      break;\n\n    case '9':\n      extendeds.push('13');\n      break;\n\n    case '10':\n      extendeds.push('#13');\n      break;\n\n    default:\n      break;\n  }\n\n  if (extendeds.length > 0) name += '(' + extendeds.join(',') + ')';\n  return name;\n}\n\nfunction getAudioFromTextin(ops) {\n  let fundamental = parseFloat(ops.fundamental);\n  let audio = [fundamental];\n  ops.value.split(', ').forEach(function (interval) {\n    if (interval.includes('/') && !interval.includes('.')) {\n      let num_dem = interval.split('/');\n      let numerator = parseInt(num_dem[0]);\n      let denominator = parseInt(num_dem[1]);\n      audio.push(fundamental * numerator / denominator);\n    } else if (interval.includes('.') && !interval.includes('/')) {\n      let cents = parseFloat(interval);\n      audio.push(fundamental * Math.pow(2, cents / 1200));\n    }\n  });\n  return audio;\n}\n\nfunction play(audio, playtime, shape) {\n  let AudioContext = window.AudioContext || window.webkitAudioContext;\n  const ctx = new AudioContext();\n  let buffer = ctx.createBuffer(1, playtime * SAMPLE_RATE, SAMPLE_RATE);\n  let bufferSetter = buffer.getChannelData(0);\n  var generator = typeof shape == 'function' ? shape : shapes[shape];\n\n  for (let t = 0; t < playtime * SAMPLE_RATE; t++) {\n    audio.forEach(function (freq) {\n      bufferSetter[t] += generator(t, freq);\n    });\n  }\n\n  let source = ctx.createBufferSource();\n  source.buffer = buffer;\n  source.connect(ctx.destination);\n  source.start();\n}\n\nconst Sound = {\n  getAudio,\n  getAudioFromTextin,\n  getChordName,\n  play\n};\nexport default Sound;","map":{"version":3,"sources":["/Users/jimmy/Documents/GitHub/Trytune/src/components/sound.js"],"names":["SAMPLE_RATE","shapes","sine","s","freq","t","Math","sin","PI","triangle","p","abs","floor","saw","square","tunings","tet12","Array","fill","map","elt","i","pow","just","getAudio","ops","scale","audio","playtime","parseFloat","fundamental","system","shape","root","parseInt","rootBNS","triad","JSON","parse","seventh","ninth","eleventh","thirteenth","third","fifth","push","isNaN","getChordName","name","toLowerCase","extendeds","length","join","getAudioFromTextin","value","split","forEach","interval","includes","num_dem","numerator","denominator","cents","play","AudioContext","window","webkitAudioContext","ctx","buffer","createBuffer","bufferSetter","getChannelData","generator","source","createBufferSource","connect","destination","start","Sound"],"mappings":"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","sourcesContent":["const SAMPLE_RATE = 44100\n\nlet shapes = {\n  sine: function (s, freq) {\n    let t = s / SAMPLE_RATE;\n    return Math.sin(t * freq * 2 * Math.PI);\n  },\n  triangle: function (s, freq) {\n    let t = s / SAMPLE_RATE;\n    let p = 1 / freq;\n    return 2 * Math.abs(2 * (t/p - Math.floor(t/p + 1/2))) - 1;\n  },\n  saw: function (s, freq) {\n    let t = s / SAMPLE_RATE;\n    let p = 1 / freq;\n    return 2 * (t/p - Math.floor(t/p + 1/2));\n  },\n  square: function (s, freq) {\n    let t = s / SAMPLE_RATE;\n    let p = 1 / freq;\n    return t % p > p / 2 ? 1 : -1;\n  }\n}\n\n/*function melody(notes) {\n  let mel = []\n  for (let i = 0; i < notes.length; i++) {\n    mel = mel.concat(notes[i])\n  }\n  return mel\n}*/\n\nconst tunings = {\n  tet12: new Array(12).fill(1).map((elt,i) => Math.pow(2,i/12)),\n  just: [1, 16/15, 9/8, 6/5, 5/4, 4/3, 7/5, 3/2, 8/5, 5/3, 16/9, 15/8]\n}\n\nfunction getAudio(ops) {\n  let scale = tet12\n  const audio = []\n  ops = {\n    playtime: parseFloat(ops.playtime),\n    fundamental: parseFloat(ops.fundamental),\n    system: ops.system,\n    shape: tunings[ops.shape],\n    root: parseInt(ops.root),\n    rootBNS: parseInt(ops.rootBNS),\n    triad: JSON.parse(ops.triad),\n    seventh: parseInt(ops.seventh),\n    ninth: parseInt(ops.ninth),\n    eleventh: parseInt(ops.eleventh),\n    thirteenth: parseInt(ops.thirteenth),\n  }\n\n  let root = ops.root + ops.rootBNS\n  let third = ops.triad[0]\n  let fifth = ops.triad[1]\n  audio.push(ops.fundamental * scale[root])\n  audio.push(ops.fundamental * scale[root + third])\n  audio.push(ops.fundamental * scale[root + fifth])\n\n  if (!isNaN(ops.seventh))\n    audio.push(ops.fundamental * scale[root + ops.seventh])\n  if (!isNaN(ops.ninth))\n    audio.push(ops.fundamental * 2 * scale[root + ops.ninth])\n  if (!isNaN(ops.eleventh))\n    audio.push(ops.fundamental * 2 * scale[root + ops.eleventh])\n  if (!isNaN(ops.thirteenth))\n    audio.push(ops.fundamental * 2 * scale[root + ops.thirteenth])\n\n  return audio\n}\n\nfunction getChordName(ops) {\n  let name = '';\n  switch (ops.rootBNS) {\n    case '-1':\n      name += 'b';\n      break;\n    case '1':\n      name += '#';\n      break;\n    default:\n      break;\n  }\n  let root;\n  switch (ops.root) {\n    case '0':\n      root = 'I';\n      break;\n    case '2':\n    root = 'II';\n      break;\n    case '4':\n    root = 'III';\n      break;\n    case '5':\n    root = 'IV';\n      break;\n    case '7':\n    root = 'V';\n      break;\n    case '9':\n    root = 'VI';\n      break;\n    case '11':\n    root = 'VII';\n      break;\n    default:\n      break;\n  }\n  switch (ops.triad) {\n    case '[4,7]':\n      name += root;\n      break;\n    case '[3,7]':\n      name += root.toLowerCase();\n      break;\n    case '[4,8]':\n      name += root + 'aug';\n      break;\n    case '[3,6]':\n      name += root.toLowerCase() + 'dim';\n      break;\n    case '[5,7]':\n      name += root + 'sus4';\n      break;\n    case '[2,7]':\n      name += root + 'sus2';\n      break;\n    case '[4,6]':\n      name += root + 'b5';\n      break;\n    default:\n      break;\n  }\n  switch (ops.seventh) {\n    case '9':\n      name += 'dim7';\n      break;\n    case '10':\n      name += '7';\n      break;\n    case '11':\n      name += 'maj7';\n      break;\n    default:\n      break;\n  }\n  let extendeds = []\n  switch (ops.ninth) {\n    case '1':\n      extendeds.push('b9');\n      break;\n    case '2':\n      extendeds.push('9');\n      break;\n    case '3':\n      extendeds.push('#9');\n      break;\n    default:\n      break;\n  }\n  switch (ops.eleventh) {\n    case '5':\n      extendeds.push('11');\n      break;\n    case '6':\n      extendeds.push('#11');\n      break;\n    default:\n      break;\n  }\n  switch (ops.thirteenth) {\n    case '8':\n      extendeds.push('b13');\n      break;\n    case '9':\n      extendeds.push('13');\n      break;\n    case '10':\n      extendeds.push('#13');\n      break;\n    default:\n      break;\n  }\n  if (extendeds.length > 0) (\n    name += '(' + extendeds.join(',') + ')'\n  )\n  return name;\n}\n\nfunction getAudioFromTextin(ops) {\n  let fundamental = parseFloat(ops.fundamental)\n  let audio = [fundamental]\n  ops.value.split(', ').forEach(function(interval) {\n    if (interval.includes('/') && !interval.includes('.')) {\n      let num_dem = interval.split('/');\n      let numerator = parseInt(num_dem[0]);\n      let denominator = parseInt(num_dem[1]);\n      audio.push(fundamental * numerator / denominator);\n    } else if (interval.includes('.') && !interval.includes('/')) {\n      let cents = parseFloat(interval);\n      audio.push(fundamental * Math.pow(2, cents/1200));\n    }\n  })\n  return audio;\n}\n\nfunction play(audio, playtime, shape) {\n  let AudioContext = window.AudioContext || window.webkitAudioContext;\n  const ctx = new AudioContext();\n  let buffer = ctx.createBuffer(1, playtime * SAMPLE_RATE, SAMPLE_RATE);\n  let bufferSetter = buffer.getChannelData(0);\n  var generator = typeof shape == 'function' ? shape : shapes[shape];\n\n  for (let t = 0; t < playtime * SAMPLE_RATE; t++) {\n    audio.forEach(function(freq) {\n      bufferSetter[t] += generator(t, freq)\n    })\n  }\n\n  let source = ctx.createBufferSource();\n  source.buffer = buffer;\n  source.connect(ctx.destination);\n  source.start();\n}\n\nconst Sound = {\n  getAudio,\n  getAudioFromTextin,\n  getChordName,\n  play\n}\n\nexport default Sound;\n"]},"metadata":{},"sourceType":"module"}