{"ast":null,"code":"const tone = require('tonegenerator');\n\nfunction harmony(freqs = 440, time = 3, shape = 'sine') {\n  if (typeof freqs === 'number') {\n    return tone({\n      freq: freqs,\n      lengthInSecs: time,\n      volume: tone.MAX_16,\n      rate: 44100,\n      shape: shape\n    });\n  } else if (freqs !== null && typeof freqs === 'object') {\n    let tones = [];\n\n    for (let i = 0; i < freqs.length; i++) {\n      tones.push(tone({\n        freq: freqs[i],\n        lengthInSecs: time,\n        volume: tone.MAX_16,\n        rate: 44100,\n        shape: shape\n      }));\n    }\n\n    let samples = [];\n\n    for (let i = 0; i < tones[0].length; i++) {\n      samples.push(0);\n\n      for (let j = 0; j < tones.length; j++) {\n        samples[i] += tones[j][i];\n      }\n\n      samples[i] /= tones.length;\n    }\n\n    return samples;\n  }\n}\n/*function melody(notes) {\n  let mel = []\n  for (let i = 0; i < notes.length; i++) {\n    mel = mel.concat(notes[i])\n  }\n  return mel\n}*/\n\n/*function writeAudio(samples) {\n  let file = fs.createWriteStream('components/audio/cur.wav')\n  file.write(header(samples.length * 2, { bitDepth: 16 }))\n  let data = Int16Array.from(samples)\n  let buffer = Buffer.allocUnsafe(data.length * 2) // 2 bytes per sample\n  data.forEach(function (value, index) {\n    buffer.writeInt16LE(value, index * 2)\n  })\n  file.write(buffer)\n  file.end()\n}*/\n\n\nconst scale = new Array(24).fill(1).map((elt, i) => Math.pow(2, i / 12));\n\nfunction getAudio(ops) {\n  const audio = [];\n  ops = {\n    playtime: parseFloat(ops.playtime),\n    fundamental: parseFloat(ops.fundamental),\n    shape: ops.shape,\n    root: parseInt(ops.root),\n    rootBNS: parseInt(ops.rootBNS),\n    triad: JSON.parse(ops.triad),\n    seventh: parseInt(ops.seventh),\n    ninth: parseInt(ops.ninth),\n    eleventh: parseInt(ops.eleventh),\n    thirteenth: parseInt(ops.thirteenth)\n  };\n  let root = ops.root + ops.rootBNS;\n  let third = ops.triad[0];\n  let fifth = ops.triad[1];\n  audio.push(ops.fundamental * scale[root]);\n  audio.push(ops.fundamental * scale[root + third]);\n  audio.push(ops.fundamental * scale[root + fifth]);\n  if (!isNaN(ops.seventh)) audio.push(ops.fundamental * scale[root + ops.seventh]);\n  if (!isNaN(ops.ninth)) audio.push(ops.fundamental * scale[root + ops.ninth]);\n  if (!isNaN(ops.eleventh)) audio.push(ops.fundamental * scale[root + ops.eleventh]);\n  if (!isNaN(ops.thirteenth)) audio.push(ops.fundamental * scale[root + ops.thirteenth]);\n  return audio;\n}\n\nfunction play(audio, playtime, shape) {\n  let j = 0;\n  console.log('playing', j);\n  const chord = harmony(audio, playtime, shape);\n  console.log('playing', j++);\n  const audioCtx = new AudioContext();\n  console.log('playing', j++);\n  let buffer = audioCtx.createBuffer(1, playtime * audioCtx.sampleRate, audioCtx.sampleRate);\n  console.log('playing', j++);\n  let bufferSet = buffer.getChannelData(0);\n  console.log('playing', j++);\n\n  for (let i = 0; i < playtime * audioCtx.sampleRate; i++) {\n    bufferSet[i] = chord[i] / 32;\n  }\n\n  console.log('playing', j++);\n  let source = audioCtx.createBufferSource();\n  console.log('playing', j++);\n  source.buffer = buffer;\n  console.log('playing', j++);\n  source.connect(audioCtx.destination);\n  console.log('playing', j++);\n  source.start();\n}\n\nconst Trytune = {\n  getAudio,\n  play\n};\nexport default Trytune;","map":{"version":3,"sources":["/Users/jimmy/Documents/trytune/src/components/trytune.js"],"names":["tone","require","harmony","freqs","time","shape","freq","lengthInSecs","volume","MAX_16","rate","tones","i","length","push","samples","j","scale","Array","fill","map","elt","Math","pow","getAudio","ops","audio","playtime","parseFloat","fundamental","root","parseInt","rootBNS","triad","JSON","parse","seventh","ninth","eleventh","thirteenth","third","fifth","isNaN","play","console","log","chord","audioCtx","AudioContext","buffer","createBuffer","sampleRate","bufferSet","getChannelData","source","createBufferSource","connect","destination","start","Trytune"],"mappings":"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","sourcesContent":["const tone = require('tonegenerator')\n\nfunction harmony(freqs=440, time=3, shape='sine') {\n  if (typeof freqs === 'number') {\n    return tone({\n      freq: freqs,\n      lengthInSecs: time,\n      volume: tone.MAX_16,\n      rate: 44100,\n      shape: shape,\n    })\n  } else if (freqs !== null && typeof freqs === 'object') {\n    let tones = []\n    for (let i = 0; i < freqs.length; i++) {\n      tones.push(tone({\n        freq: freqs[i],\n        lengthInSecs: time,\n        volume: tone.MAX_16,\n        rate: 44100,\n        shape: shape,\n      }))\n    }\n    let samples = []\n    for (let i = 0; i < tones[0].length; i++) {\n      samples.push(0)\n      for (let j = 0; j < tones.length; j++) {\n        samples[i] += tones[j][i]\n      }\n      samples[i] /= tones.length\n    }\n    return samples\n  }\n}\n\n/*function melody(notes) {\n  let mel = []\n  for (let i = 0; i < notes.length; i++) {\n    mel = mel.concat(notes[i])\n  }\n  return mel\n}*/\n\n/*function writeAudio(samples) {\n  let file = fs.createWriteStream('components/audio/cur.wav')\n  file.write(header(samples.length * 2, { bitDepth: 16 }))\n  let data = Int16Array.from(samples)\n  let buffer = Buffer.allocUnsafe(data.length * 2) // 2 bytes per sample\n  data.forEach(function (value, index) {\n    buffer.writeInt16LE(value, index * 2)\n  })\n  file.write(buffer)\n  file.end()\n}*/\nconst scale = new Array(24).fill(1).map((elt,i) => Math.pow(2,i/12))\n\nfunction getAudio(ops) {\n  const audio = []\n  ops = {\n    playtime: parseFloat(ops.playtime),\n    fundamental: parseFloat(ops.fundamental),\n    shape: ops.shape,\n    root: parseInt(ops.root),\n    rootBNS: parseInt(ops.rootBNS),\n    triad: JSON.parse(ops.triad),\n    seventh: parseInt(ops.seventh),\n    ninth: parseInt(ops.ninth),\n    eleventh: parseInt(ops.eleventh),\n    thirteenth: parseInt(ops.thirteenth),\n  }\n\n  let root = ops.root + ops.rootBNS\n  let third = ops.triad[0]\n  let fifth = ops.triad[1]\n  audio.push(ops.fundamental * scale[root])\n  audio.push(ops.fundamental * scale[root + third])\n  audio.push(ops.fundamental * scale[root + fifth])\n\n  if (!isNaN(ops.seventh))\n    audio.push(ops.fundamental * scale[root + ops.seventh])\n  if (!isNaN(ops.ninth))\n    audio.push(ops.fundamental * scale[root + ops.ninth])\n  if (!isNaN(ops.eleventh))\n    audio.push(ops.fundamental * scale[root + ops.eleventh])\n  if (!isNaN(ops.thirteenth))\n    audio.push(ops.fundamental * scale[root + ops.thirteenth])\n\n  return audio\n}\n\nfunction play(audio, playtime, shape) {\n  let j = 0\n  console.log('playing',j)\n  const chord = harmony(audio, playtime, shape)\n  console.log('playing',j++)\n  const audioCtx = new AudioContext()\n  console.log('playing',j++)\n  let buffer = audioCtx.createBuffer(1, playtime * audioCtx.sampleRate, audioCtx.sampleRate)\n  console.log('playing',j++)\n  let bufferSet = buffer.getChannelData(0)\n  console.log('playing',j++)\n  for (let i = 0; i < playtime * audioCtx.sampleRate; i++) {\n    bufferSet[i] = chord[i] / 32\n  }\n  console.log('playing',j++)\n  let source = audioCtx.createBufferSource()\n  console.log('playing',j++)\n  source.buffer = buffer\n  console.log('playing',j++)\n  source.connect(audioCtx.destination)\n  console.log('playing',j++)\n  source.start()\n}\n\nconst Trytune = {\n  getAudio,\n  play\n}\n\nexport default Trytune;\n"]},"metadata":{},"sourceType":"module"}